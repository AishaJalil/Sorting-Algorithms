#include <iostream>
#include <cstdlib>
#include <ctime>
#include <bits/stdc++.h>
using namespace std;

void print(int* a, int n) {
    for (int x = 0; x < n; x++) {
        cout << a[x] << " ";
    }
}

void Merge(int* arr, int low, int mid, int high) {
    int size = high - low + 1;
    int* merge = new int[size];

    int i = low, j = mid + 1, k = 0;

    while (i <= mid && j <= high) {
        if (arr[i] <= arr[j]) {
            merge[k++] = arr[i++];
        }
        else {
            merge[k++] = arr[j++];
        }
    }

    while (i <= mid) {
        merge[k++] = arr[i++];
    }

    while (j <= high) {
        merge[k++] = arr[j++];
    }

    for (int x = 0; x < size; x++) {
        arr[low + x] = merge[x];
    }

    delete[] merge;
}

void MergeSort(int* arr, int low, int high) {
    if (low < high) {
        int mid = low + (high - low) / 2;
        MergeSort(arr, low, mid);
        MergeSort(arr, mid + 1, high);
        Merge(arr, low, mid, high);
    }
}

void BubbleSort(int* arr, int n) {
    int temp;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int n = 10000;
    int* arr = new int[n];

    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 10 + 1;
    }

    int* dupArray = new int[n];
    for (int i = 0; i < n; i++) {
        dupArray[i] = arr[i];
    }

   // cout << "Original array: ";
    //print(arr, n);

    clock_t start, end;
    start = clock();
    MergeSort(arr, 0, n - 1);
    end = clock();
    //cout << "\n\nSorted array using Merge Sort Algorithm: ";
   // print(arr, n);
   
    
    double time_taken = double(end - start) / double(CLOCKS_PER_SEC);
    cout << "\nTime taken by Merge Sort is  : " << fixed<< time_taken << setprecision(5);
    cout << " sec " << endl;
    
    start=0, end=0;
    start = clock();
    BubbleSort(dupArray, n);
    end = clock();
  //  cout << "\n\nSorted array using Bubble Sort Algorithm: ";
   // print(dupArray, n);
     time_taken = double(end - start) / double(CLOCKS_PER_SEC);
    cout << "\nTime taken by Bubble Sort is  : " << fixed<< time_taken << setprecision(5);
    cout << " sec " << endl;
  
  
    delete[] arr;
    delete[] dupArray;

    return 0;
}

